#!/usr/bin/env bash
# Customizer - Advanced LiveCD Remastering Tool
# Copyright (C) 2010-2012  Ivailo Monev
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Homepage: https://github.com/fluxer/Customizer
# Wiki: https://github.com/fluxer/Customizer/wiki
# Issues: https://github.com/fluxer/Customizer/issues
#
source /opt/Customizer/settings.conf
source /opt/Customizer/libs/source.lib

#################### check configs & dirs before going further ####################

CHECK_UID
CHECK_FILESYSTEM

if [ ! -d "${ISO_DIR}/isolinux" ]; then
	ERROR "${ISO_DIR}/isolinux doesnt exist"
fi

if [ ! -d "${ISO_DIR}/.disk" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/.disk"
	mkdir -p "${ISO_DIR}/.disk"
fi

if [ ! -d "${ISO_DIR}/casper" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/casper"
	mkdir -p "${ISO_DIR}/casper"
fi

if [ ! -e "${ISO_DIR}/.disk/cd_type" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/.disk/cd_type"
	echo "full_cd/single" > "${ISO_DIR}/.disk/cd_type"
fi

if [ -e "$WORK_DIR/usr/bin/ubiquity" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/.disk/base_installable"
	echo > "${ISO_DIR}/.disk/base_installable"
else
	rm -f "${ISO_DIR}/.disk/base_installable"
fi

if [ ! -f "${ISO_DIR}/.disk/casper-uuid-generic" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/.disk/casper-uuid-generic"
	echo "f01d0b93-4f0e-4e95-93ae-e3d0e114d4f7" > "${ISO_DIR}/.disk/casper-uuid-generic"
fi

if [ ! -f "${ISO_DIR}/.disk/release_notes_url" ]; then
	EXTRA_WARNING "Creating" "${ISO_DIR}/.disk/release_notes_url"
	echo "http://www.ubuntu.com/getubuntu/releasenotes" > "${ISO_DIR}/.disk/release_notes_url"
fi

if [ ! -f "${FILESYSTEM_DIR}/etc/lsb-release" ]; then
	ERROR "${FILESYSTEM_DIR}/etc/lsb-release dosn't exists"
fi

if [ ! -f "${FILESYSTEM_DIR}/etc/casper.conf" ]; then
	ERROR "${FILESYSTEM_DIR}/etc/casper.conf dosn't exists"
fi

#################### setting up the root filesystem #####################

INFO "Loading configs"
ARCH=$(chroot "${FILESYSTEM_DIR}" dpkg --print-architecture) || ERROR "Unable to chroot and get the architecture"
RELEASE_NOTES_URL="$(cat ${ISO_DIR}/.disk/release_notes_url)"
DIST=$(grep DISTRIB_ID= "${FILESYSTEM_DIR}/etc/lsb-release" | sed 's/DISTRIB_ID=//;s/\"//g') || ERROR "Unable to chroot and get the distribution ID"
VERSION=$(grep DISTRIB_RELEASE= "${FILESYSTEM_DIR}/etc/lsb-release" | sed 's/DISTRIB_RELEASE=//;s/\"//g') || ERROR "Unable to get the distribution version"
CODENAME=$(grep DISTRIB_CODENAME= "${FILESYSTEM_DIR}/etc/lsb-release" | sed 's/DISTRIB_CODENAME=//;s/\"//g') || ERROR "Unable to get the distribution codename"
LIVEUSERNAME=$(grep "export USERNAME=" "${FILESYSTEM_DIR}/etc/casper.conf" | sed 's/export USERNAME=//;s/\"//g') || ERROR "Unable get the username"
ISO_NAME="${DIST}-${ARCH}-${VERSION}"

to_clean="/home/${ISO_NAME}.iso ${ISO_DIR}/casper/filesystem.squashfs \
${ISO_DIR}/casper/initrd.lz ${ISO_DIR}/casper/vmlinuz ${ISO_DIR}/casper/vmlinuz.efi \
${ISO_DIR}/casper/filesystem.manifest ${ISO_DIR}/casper/filesystem.manifest-desktop \
${ISO_DIR}/casper/filesystem.size ${ISO_DIR}/casper/README.diskdefines \
${ISO_DIR}/md5sum.txt"

for i in ${to_clean};do
	if [ -e "${i}" ];then
		EXTRA_INFO "Purging" "${i}"
		rm -f "${i}" || EXTRA_WARNING "Unable to delete" "${i}"
	fi
done

INITRD_SOURCE="$(ls ${FILESYSTEM_DIR}/boot/initrd.img-* | tail -1)"
VMLINUZ_SOURCE="$(ls ${FILESYSTEM_DIR}/boot/vmlinuz-* | tail -1)"

CHROOT_PREPARE
CHROOT_MOUNT_PSEUDO
CHROOT_FIX
CHROOT_HELPER
if [ -z "${INITRD_SOURCE}" ] || [ -z "${VMLINUZ_SOURCE}" ] ; then
	INFO "Purging Kernels (if any)"
	CHROOT_EXECUTE "apt-get purge --yes linux-image* linux-headers* -qq"
	INFO "Installing Kernel"
	CHROOT_EXECUTE "apt-get install --yes linux-image-generic linux-headers-generic -qq"


	INITRD_SOURCE="$(ls ${FILESYSTEM_DIR}/boot/initrd.img-* | tail -1)"
	VMLINUZ_SOURCE="$(ls ${FILESYSTEM_DIR}/boot/vmlinuz-* | tail -1)"
else
	INFO "Installing the latest initramfs-tools"
	CHROOT_EXECUTE "apt-get install --yes initramfs-tools -qq"
	INFO "Updating/creating Kernel image"
	CHROOT_EXECUTE "update-initramfs -k all -t -u"
fi
CHROOT_UNDO_FIX
CHROOT_UNMOUNT_PSEUDO
CHROOT_VERB_UNMOUNT_PSEUDO
CHROOT_CLEAN

EXTRA_INFO "Copying initrd" "${INITRD_SOURCE#${FILESYSTEM_DIR}/boot/}"
cp -f "$INITRD_SOURCE" "${ISO_DIR}/casper/initrd.lz" || ERROR "Unable to copy initrd.img"

if [[ $(grep -Rs "vmlinuz.efi" "${ISO_DIR}") ]];then
	EXTRA_INFO "Copying vmlinuz.efi" "${VMLINUZ_SOURCE#${FILESYSTEM_DIR}/boot/}"
	cp -f "$VMLINUZ_SOURCE" "${ISO_DIR}/casper/vmlinuz.efi" || ERROR "Unable to copy vmlinuz.efi"
else
	EXTRA_INFO "Copying vmlinuz" "${VMLINUZ_SOURCE#${FILESYSTEM_DIR}/boot/}"
	cp -f "$VMLINUZ_SOURCE" "${ISO_DIR}/casper/vmlinuz" || ERROR "Unable to copy vmlinuz"
fi

if [ "$BOOT_FILES" = "1" ]; then
	INFO "Deleteing boot files"
	rm -f "${FILESYSTEM_DIR}/boot/initrd.img"*
	rm -f "${FILESYSTEM_DIR}/boot/vmlinuz"*
	rm -f "${FILESYSTEM_DIR}/boot/config"*
fi

INFO "Creating squashed FileSystem"
mksquashfs "${FILESYSTEM_DIR}" "${ISO_DIR}/casper/filesystem.squashfs" -noappend -wildcards -ef /opt/Customizer/exclude.list -comp ${COMPRESSION} || ERROR "Unable to squash the filesystem"

INFO "Checking filesystem size"
FS_SIZE=$(du -sx "${ISO_DIR}/casper/filesystem.squashfs" | cut -f1)
if [ "${FS_SIZE}" -gt "4000000" ];then
	ERROR "The squashed filesystem size is greater than 4GB"
fi

INFO "Creating filesystem.size"
echo "${FS_SIZE}" > "${ISO_DIR}/casper/filesystem.size" || ERROR "Unable to calculate the size of the filesystem"

INFO "Creating filesystem.manifest"
chroot "${FILESYSTEM_DIR}" dpkg-query -W --showformat='${Package} ${Version}\n' > "${ISO_DIR}/casper/filesystem.manifest" || ERROR "Unable to create the filesystem.manifest"
INFO "Creating filesystem.manifest-desktop"
cp -f "${ISO_DIR}/casper/filesystem.manifest" "${ISO_DIR}/casper/filesystem.manifest-desktop"
for i in ubiquity casper live-initramfs user-setup discover1 xresprobe os-prober libdebian-installer4 ; do
        sed -i "/${i}/d" "${ISO_DIR}/casper/filesystem.manifest-desktop"
done

INFO "Creating README.diskdefines"
cat > "${ISO_DIR}/README.diskdefines" << EOF
#define DISKNAME  $DIST $VERSION "$CODENAME" - Release $ARCH
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF

INFO "Creating disk info"
echo "${DIST} ${VERSION} "${CODENAME}" - Release ${ARCH} ($(date "+%Y%m%d"))" > "${ISO_DIR}/.disk/info"

################# Creating md5sum and ISO  #################
cd "${ISO_DIR}"
INFO "Creating MD5Sums"
(find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt") > md5sum.txt || ERROR "Unable to create the md5sum"

INFO "Creating ISO"
(genisoimage -r -V "${ISO_NAME}" -b isolinux/isolinux.bin -c isolinux/boot.cat \
-cache-inodes -J -l -no-emul-boot -boot-load-size 4 -boot-info-table \
-o "/home/${ISO_NAME}.iso" -input-charset utf-8 .

chmod 555 "/home/${ISO_NAME}.iso"
EXTRA_INFO "Successfuly created ISO image" "/home/${ISO_NAME}.iso"; read nada) \
|| ERROR "Unable to create ISO image"
