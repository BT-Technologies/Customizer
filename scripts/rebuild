#!/usr/bin/env bash
# Customizer - Advanced LiveCD Remastering Tool
# Copyright (C) 2011  Ivailo Monev
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Homepage: https://github.com/fluxer/Customizer
# Wiki: https://github.com/fluxer/Customizer/wiki
# Issues: https://github.com/fluxer/Customizer/issues
#
set -u
source /opt/Customizer/common
source /opt/Customizer/settings.conf

#################### check configs & dirs before going further ####################

__check_fs_dir__
__check_lock__
__check_sources_list__

if [ ! -d "$WORK_DIR/ISO/isolinux" ]; then
	ERROR_MESSAGE "$WORK_DIR/ISO/isolinux doesnt exist"
fi

if [ ! -d "$WORK_DIR/ISO/.disk" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk"
	mkdir -p "$WORK_DIR/ISO/.disk"
fi

if [ ! -d "$WORK_DIR/ISO/casper" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/casper"
	mkdir -p "$WORK_DIR/ISO/casper"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/cd_type" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/cd_type"
	echo "full_cd/single" > "$WORK_DIR/ISO/.disk/cd_type"
fi

if [ -e "$WORK_DIR/usr/bin/ubiquity" ] && [ ! -e "$WORK_DIR/ISO/.disk/base_installable" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/base_installable"
	echo > "$WORK_DIR/ISO/.disk/base_installable"
else
	rm -f "$WORK_DIR/ISO/.disk/base_installable"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/casper-uuid-generic" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/casper-uuid-generic"
	echo "f01d0b93-4f0e-4e95-93ae-e3d0e114d4f7" > "$WORK_DIR/ISO/.disk/casper-uuid-generic"
fi

if [ ! -e "$WORK_DIR/ISO/.disk/release_notes_url" ]; then
	EXTRA_WARNING_MESSAGE "Creating" "$WORK_DIR/ISO/.disk/release_notes_url"
	echo "http://www.ubuntu.com/getubuntu/releasenotes" > "$WORK_DIR/ISO/.disk/release_notes_url"
fi

if [ ! -e "$WORK_DIR/FileSystem/etc/lsb-release" ]; then
	ERROR_MESSAGE "$WORK_DIR/FileSystem/etc/lsb-release dosn't exists"
fi

if [ ! -e "$WORK_DIR/FileSystem/etc/casper.conf" ]; then
	ERROR_MESSAGE "$WORK_DIR/FileSystem/etc/casper.conf dosn't exists"
fi

#################### setting up the root filesystem #####################

INFO_MESSAGE "Loading configs"
ARCH=`chroot "$WORK_DIR/FileSystem" dpkg --print-architecture` || ERROR_MESSAGE "Unable to chroot and get the architecture"
RELEASE_NOTES_URL="`cat "$WORK_DIR/ISO/.disk/release_notes_url"`"
DIST=`grep DISTRIB_ID= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_ID=//'` || ERROR_MESSAGE "Unable to chroot and get the distribution ID"
VERSION=`grep DISTRIB_RELEASE= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_RELEASE=//'` || ERROR_MESSAGE "Unable to get the distribution version"
CODENAME=`grep DISTRIB_CODENAME= "$WORK_DIR/FileSystem/etc/lsb-release" | sed 's/DISTRIB_CODENAME=//'` || ERROR_MESSAGE "Unable to get the distribution codename"
LIVEUSERNAME=`grep "export USERNAME=" "$WORK_DIR/FileSystem/etc/casper.conf" | sed 's/export USERNAME=//;s/\"//g'` || ERROR_MESSAGE "Unable get the username"

to_clean="$WORK_DIR/$DIST-$ARCH-$VERSION.iso $WORK_DIR/ISO/casper/filesystem.squashfs \
$WORK_DIR/ISO/casper/initrd.lz $WORK_DIR/ISO/casper/vmlinuz $WORK_DIR/ISO/casper/filesystem.manifest \
$WORK_DIR/ISO/casper/filesystem.manifest-desktop $WORK_DIR/ISO/casper/filesystem.size \
$WORK_DIR/ISO/casper/README.diskdefines $WORK_DIR/ISO/md5sum.txt"
for i in $to_clean;do
	if [ -e "$i" ];then
		EXTRA_INFO_MESSAGE "Purging" "$i"
		rm -f "$i" || EXTRA_WARNING_MESSAGE "Unable to delete" "$i"
	fi
done

INFO_MESSAGE "Rebranding motd"
echo -e "$DIST $VERSION \n\n Welcome to $DIST! \n * $RELEASE_NOTES_URL\n\n" > "$WORK_DIR/FileSystem/etc/motd"
cat > "$WORK_DIR/FileSystem/etc/update-motd.d/10-help-text" << EOF
#!/bin/sh
if uname -r | grep -qs "\-server"; then
	echo
	echo "Welcome to $DIST Server!"
	echo " * $RELEASE_NOTES_URL"
	echo
	echo
else
	echo
	echo "Welcome to $DIST!"
	echo " * $RELEASE_NOTES_URL"
	echo
	echo
fi
EOF


__chroot__ "if [ ! -e /initrd.img ] || [ ! -e /vmlinuz ]; then
	echo -e \"[${Yellow}M${Reset}] ${Green}Purging Kernels (if any)${Reset}\"
	apt-get purge --yes linux-image* linux-headers* -qq
	echo -e \"[${Yellow}M${Reset}] ${Green}Installing Kernel${Reset}\"
	apt-get install --yes linux-image-generic linux-headers-generic -qq
else
	echo -e \"[${Yellow}M${Reset}] ${Green}Installing the latest initramfs-tools${Reset}\"
	apt-get install --yes initramfs-tools -qq
	echo -e \"[${Yellow}M${Reset}] ${Green}Updating/creating Kernel image${Reset}\"
	update-initramfs -u
fi"

INITRD_SOURCE="$WORK_DIR/FileSystem/initrd.img"
VMLINUZ_SOURCE="$WORK_DIR/FileSystem/vmlinuz"
INFO_MESSAGE "Copying boot files"
if [ ! -e "$INITRD_SOURCE" ] || [ ! -e "$VMLINUZ_SOURCE" ] ; then
	INITRD_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"initrd.img-* | tail -1`"
	VMLINUZ_SOURCE="`ls \"$WORK_DIR/FileSystem/boot/\"vmlinuz-* | tail -1`"
	WARNING_MESSAGE "Will use the most recent kernel"
fi

cp -f "$INITRD_SOURCE" "$WORK_DIR/ISO/casper/initrd.lz" || ERROR_MESSAGE "Unable to copy initrd.img"
cp -f "$VMLINUZ_SOURCE" "$WORK_DIR/ISO/casper/vmlinuz" || ERROR_MESSAGE "Unable to copy vmlinuz"

if [ "$BOOT_FILES" = "1" ] || [ "$BOOT_FILES" = "-1" ]; then
	INFO_MESSAGE "Deleteing boot files"
	rm -f "$WORK_DIR/FileSystem/boot/*-generic"
fi

#################### creting ISO image #####################

INFO_MESSAGE "Creating squashed FileSystem"
mksquashfs "$WORK_DIR/FileSystem" "$WORK_DIR/ISO/casper/filesystem.squashfs" || ERROR_MESSAGE "Unable to squash the filesystem"

if (( "`du -sx "$WORK_DIR/ISO/casper/filesystem.squashfs" | cut -f1`" > "4000000" ));then
	ERROR_MESSAGE" The squashed filesystem size is greater than 4GB"
fi

echo "`du -sx --block-size=1 $WORK_DIR/FileSystem | cut -f1`" > "$WORK_DIR/ISO/casper/filesystem.size" || { echo -ne "${Red}ERROR${Reset}: ${Yellow}Unable to calculate the size of the filesystem${Reset}"; read nada; exit; }

INFO_MESSAGE "Creating filesystem.manifest"
chroot "$WORK_DIR/FileSystem" dpkg-query -W --showformat='${Package} ${Version}\n' > "$WORK_DIR/ISO/casper/filesystem.manifest" || { echo -ne "${Red}ERROR${Reset}: ${Yellow}Unable to create the filesystem.manifest${Reset}"; read nada ; exit; }
INFO_MESSAGE "Creating filesystem.manifest-desktop"
cp -f "$WORK_DIR/ISO/casper/filesystem.manifest" "$WORK_DIR/ISO/casper/filesystem.manifest-desktop"
REMOVE='ubiquity casper live-initramfs user-setup discover1 xresprobe os-prober libdebian-installer4'
for i in $REMOVE ; do
        sed -i "/${i}/d" "$WORK_DIR/ISO/casper/filesystem.manifest-desktop"
done

INFO_MESSAGE "Creating README.diskdefines"
cat > "$WORK_DIR/ISO/README.diskdefines" << EOF
#define DISKNAME  $DIST $VERSION "$CODENAME" - Release $ARCH
#define TYPE  binary
#define TYPEbinary  1
#define ARCH  $ARCH
#define ARCH$ARCH  1
#define DISKNUM  1
#define DISKNUM1  1
#define TOTALNUM  0
#define TOTALNUM0  1
EOF

INFO_MESSAGE "Creating disk info"
echo "$DIST $VERSION "$CODENAME" - Release $ARCH (`date "+%Y%m%d"`)" > "$WORK_DIR/ISO/.disk/info"

cd "$WORK_DIR/ISO"
if [ "$WIN_EXECUTABLES" = "1" ] || [ "$WIN_EXECUTABLES" = "-1" ]; then
	INFO_MESSAGE "Deleteing Windows executable files"
	rm -rf "$WORK_DIR/ISO/bin"
	rm -rf "$WORK_DIR/ISO/disctree"
	rm -rf "$WORK_DIR/ISO/pics"
	rm -rf "$WORK_DIR/ISO/programs"
	rm -f "$WORK_DIR/ISO/autorun.inf"
	rm -f "$WORK_DIR/ISO/start.bmp"
	rm -f "$WORK_DIR/ISO/start.exe"
	rm -f "$WORK_DIR/ISO/start.ini"
	rm -f "$WORK_DIR/ISO/ubuntu.ico"
	rm -f "$WORK_DIR/ISO/kubuntu.ico"
	rm -f "$WORK_DIR/ISO/xubuntu.ico"
	rm -f "$WORK_DIR/ISO/lubuntu.ico"
	rm -f "$WORK_DIR/ISO/wubi-cdboot.exe"
	rm -f "$WORK_DIR/ISO/wubi.exe"
	rm -f "$WORK_DIR/ISO/umenu.exe"
	rm -f "$WORK_DIR/ISO/usb-creator.exe"
fi

################# Creating md5sum and ISO  #################

INFO_MESSAGE "Creating MD5Sums"
(find . -type f -print0 | xargs -0 md5sum | grep -v "\./md5sum.txt") > md5sum.txt || ERROR_MESSAGE "Unable to create the md5sum"

INFO_MESSAGE "Creating ISO"
(genisoimage -r -V "$DIST-$ARCH-$VERSION" -b isolinux/isolinux.bin -c isolinux/boot.cat \
-cache-inodes -J -l -no-emul-boot -boot-load-size 4 -boot-info-table \
-o "$WORK_DIR/$DIST-$ARCH-$VERSION.iso" -input-charset utf-8 .

chmod 555 $WORK_DIR/$DIST-$ARCH-$VERSION.iso
EXTRA_INFO_MESSAGE "Successfuly created ISO image" "$WORK_DIR/$DIST-$ARCH-$VERSION.iso"; read nada) \
|| ERROR_MESSAGE "Unable to create ISO image"
