' Gambas module file

PUBLIC WorkDir AS String = Func.Get_Str("/opt/Customizer/settings.conf", "WORK_DIR=", "/home")

PUBLIC FUNCTION Get_Str(SrchFile AS String, SrchStr AS String, Def AS String) AS Variant
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer

  PRINT "\n===================== Get_Str() begin ====================="
  Func.Debug_Msg("SrchFile: " & SrchFile)
  Func.Debug_Msg("SrchStr: " & SrchStr)
  Func.Debug_Msg("Def: " & Def)
  
  content = Func.Load_File(SrchFile)
  content_array = Split(content, "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN
      sLine = Replace$(sLine, SrchStr, "")
      BREAK
    ENDIF
    counter += 1
  NEXT
  
  IF counter = content_array.Count THEN
    Func.Save_File(SrchFile, content & "\n" & SrchStr & Quote(Def))
    RETURN UnQuote(Def)
    PRINT "================ Get_Str() end (appending) ================\n"
  ELSE
    PRINT "================== Get_Str() end (found) ==================\n"
    RETURN UnQuote(sLine)
  ENDIF
END

PUBLIC FUNCTION Replace_Str(SrchFile AS String, SrchStr AS String, RpcStr AS String)
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer
  
  PRINT "\n=================== Replace_Str() begin ==================="
  Func.Debug_Msg("SrchFile: " & SrchFile)
  Func.Debug_Msg("SrchStr: " & SrchStr)
  Func.Debug_Msg("RpcStr: " & RpcStr)
  
  content = Func.Load_File(SrchFile)
  content_array = Split(content, "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN
      Func.Save_File(SrchFile, Replace$(content, sLine, SrchStr & Quote(RpcStr)))
      PRINT "================ Replace_Str() end (found) ================\n"
      BREAK
    ENDIF
    counter += 1
  NEXT
  
  IF counter = content_array.Count THEN
    Func.Save_File(SrchFile, content & "\n" & SrchStr & Quote(RpcStr))
    PRINT "============== Replace_Str() end (appending) ==============\n"
  ENDIF
END

PUBLIC FUNCTION Replace_Str_AsIs(SrchFile AS String, SrchStr AS String, RpcStr AS String)
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer
  
  PRINT "\n=============== Replace_Str_AsIs() begin ================"
  Func.Debug_Msg("SrchFile: " & SrchFile)
  Func.Debug_Msg("SrchStr: " & SrchStr)
  Func.Debug_Msg("RpcStr: " & RpcStr)
  
  content = Func.Load_File(SrchFile)
  content_array = Split(content, "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN
      Func.Save_File(SrchFile, Replace$(content, sLine, SrchStr & RpcStr))
      PRINT "============= Replace_Str_AsIs() end (found) ==============\n"
      BREAK
    ENDIF
    counter += 1
  NEXT
  
  IF counter = content_array.Count THEN
    Func.Save_File(SrchFile, content & "\n" & SrchStr & RpcStr)
    PRINT "=========== Replace_Str_AsIs() end (appending) ============\n"
  ENDIF
END


PUBLIC FUNCTION Edit_File(EditFile AS String)
  DIM Editor AS String

  Func.Event_Msg("Detecting Text Editor")
  IF Exist("/usr/bin/xdg-open") THEN
    Editor = "/usr/bin/xdg-open"
  ELSE IF Exist("/usr/bin/gedit") THEN
    Editor = "/usr/bin/gedit"
  ELSE IF Exist("/usr/bin/kate") THEN
    Editor = "/usr/bin/kate"
  ELSE IF Exist("/usr/bin/kwrite") THEN
    Editor = "/usr/bin/kwrite"
  ELSE IF Exist("/usr/bin/medit") THEN
    Editor = "/usr/bin/medit"
  ELSE IF Exist("/usr/bin/nedit") THEN
    Editor = "/usr/bin/nedit"
  ELSE IF Exist("/usr/bin/mousepad") THEN
    Editor = "/usr/bin/mousepad"
  ELSE IF Exist("/usr/bin/leafpad") THEN
    Editor = "/usr/bin/leafpad"
  ELSE IF Exist("/usr/bin/geany") THEN
    Editor = "/usr/bin/geany"
  ELSE IF Exist("/usr/bin/emacs") THEN
    Editor = "/usr/bin/emacs"
  ELSE IF Exist("/usr/bin/bluefish") THEN
    Editor = "/usr/bin/bluefish"
  ELSE IF Exist("/usr/bin/ultraedit") THEN
    Editor = "/usr/bin/ultraedit"
  ELSE IF Exist("/usr/bin/scite") THEN
    Editor = "/usr/bin/scite"
  ELSE IF Exist("/usr/bin/vim") THEN
    Editor = "/usr/bin/vim"
  ELSE IF Exist("/usr/bin/vi") THEN
    Editor = "/usr/bin/vi"
  ELSE IF Exist("/usr/bin/nano") THEN
    Editor = "/usr/bin/nano"
  ELSE IF Exist("/usr/bin/pico") THEN
    Editor = "/usr/bin/pico"
  ELSE 
    Message.Error("Unable to detect Terminal Emulator! \nSupported are: \n\nGnome-terminal, Konsole, XFCE4-terminal, LXTerminal, Terminator, Sakura, Yakuake, urxterm, Eterm, xterm and aterm")
  ENDIF 

  Func.Debug_Msg("Editing file: " & EditFile)

  IF Editor = "nano" OR Editor = "pico" OR Editor = "vi" OR Editor = "vim" THEN
    EXEC [Func.Use_Term(), "-e", Editor, WorkDir & EditFile] WAIT
  ELSE
    EXEC [Editor, WorkDir & EditFile]
  ENDIF
  
  CATCH
    Message.Error("Unable to edit\n\nFile: " & EditFile & "\nWith text-editor: " & Editor)
END

PUBLIC FUNCTION Browse_Dir(BrsDir AS String)
  Func.Event_Msg("Browsing directory: " & BrsDir)

  IF NOT Exist(WorkDir & BrsDir) THEN
    Message.Error("The directory doesn't exists")
  ELSE IF Exist("/usr/bin/xdg-open") THEN
    EXEC ["/usr/bin/xdg-open", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/nautilus") THEN
    EXEC ["/usr/bin/nautilus", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/dolphin") THEN
    EXEC ["/usr/bin/dolphin", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/pcmanfm") THEN
    EXEC ["/usr/bin/pcmanfm", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/xfe") THEN
    EXEC ["/usr/bin/xfe", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/worker") THEN
    EXEC ["/usr/bin/worker", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/gentoo") THEN
    EXEC ["/usr/bin/gentoo", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/thunar") THEN
    EXEC ["/usr/bin/thunar", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/filerunner") THEN
    EXEC ["/usr/bin/filerunner", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/krusader") THEN
    EXEC ["/usr/bin/krusader", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/rox-filer") THEN
    EXEC ["/usr/bin/rox-filer", WorkDir & BrsDir]
  ELSE
    Message.Warning("No supported File-Manager was detected! \nSupported are: \n\nNautilus, Dolphin, PCManFM, Thunar, XFE, Worker, Gentoo, FileRunner, Krusader and ROX-Filer")
  ENDIF
END

PUBLIC FUNCTION Enable_Stuff()
  Func.Event_Msg("Enabling widgets")
  
  FMain.Create_Snapshot.Enabled = TRUE
  FMain.Edit_Sources.Enabled = TRUE
  FMain.Install_DEB.Enabled = TRUE
  FMain.Terminal.Enabled = TRUE
  FMain.Build_ISO.Enabled = TRUE
  FMain.Clean.Enabled = TRUE
  FMain.Extras_Menu.Enabled = TRUE
  FMain.Directories.Enabled = TRUE
  FMain.Files.Enabled = TRUE
  FMain.Archive.Enabled = TRUE
  FMain.DistName.Enabled = TRUE
  FMain.HostName.Enabled = TRUE
  FMain.LiveCD_User.Enabled = TRUE
  FMain.Version.Enabled = TRUE
  FMain.ReleaseNotesURL.Enabled = TRUE
END

PUBLIC FUNCTION Disable_Stuff()
  Func.Event_Msg("Disabling widgets")

  FMain.Create_Snapshot.Enabled = FALSE
  FMain.Edit_Sources.Enabled = FALSE
  FMain.Install_DEB.Enabled = FALSE
  FMain.Archive.Enabled = FALSE
  FMain.Terminal.Enabled = FALSE
  FMain.Build_ISO.Enabled = FALSE
  FMain.Clean.Enabled = FALSE
  FMain.Extras_Menu.Enabled = FALSE
  FMain.Directories.Enabled = FALSE
  FMain.Files.Enabled = FALSE
  FMain.Desktop.Enabled = FALSE
  FMain.DistName.Enabled = FALSE
  FMain.HostName.Enabled = FALSE
  FMain.LiveCD_User.Enabled = FALSE
  FMain.Version.Enabled = FALSE
  FMain.ReleaseNotesURL.Enabled = FALSE
END

PUBLIC FUNCTION Load_File(lFile AS String) AS Variant
  Func.Debug_Msg("Loading file: " & lFile)
  IF Exist(lFile) THEN 
    IF Access(lFile, gb.Read) THEN 
      RETURN File.Load(lFile)
    ELSE 
      Message.Error(lFile & " is not readable!")
    ENDIF 
  ELSE 
    Message.Error(lFile & " does not exists!")
  ENDIF 
END

PUBLIC FUNCTION Save_File(sFile AS String, Cont AS String)
  Func.Debug_Msg("Saving file: " & sFile)
  IF Exist(sFile) THEN 
    IF Access(sFile, gb.Write) THEN 
        File.Save(sFile, Cont)
    ELSE 
      Message.Error(sFile & " is not writable!")
    ENDIF 
  ELSE 
    Message.Error(sFile & " does not exists!")
  ENDIF 
END

PUBLIC FUNCTION Use_Term() AS String
  Func.Event_Msg("Detecting Terminal Emulator")
  IF Exist("/usr/bin/gnome-terminal") THEN
    RETURN "/usr/bin/gnome-terminal"
  ELSE IF Exist("/usr/bin/konsole") THEN
    RETURN "/usr/bin/konsole"
  ELSE IF Exist("/usr/bin/xfce4-terminal") THEN
    RETURN "/usr/bin/xfce4-terminal"
  ELSE IF Exist("/usr/bin/lxterminal") THEN
    RETURN "/usr/bin/lxterminal"
  ELSE IF Exist("/usr/bin/terminator") THEN
    RETURN "/usr/bin/terminator"
  ELSE IF Exist("/usr/bin/sakura") THEN
    RETURN "/usr/bin/sakura"
  ELSE IF Exist("/usr/bin/yakuake") THEN
    RETURN "/usr/bin/yakuake"
  ELSE IF Exist("/usr/bin/urxterm") THEN
    RETURN "/usr/bin/urxterm"
  ELSE IF Exist("/usr/bin/aterm") THEN
    RETURN "/usr/bin/aterm"
  ELSE IF Exist("/usr/bin/Eterm") THEN
    RETURN "/usr/bin/Eterm"
  ELSE IF Exist("/usr/bin/xterm") THEN
    RETURN "/usr/bin/xterm"
  ELSE 
    Message.Error("Unable to detect Terminal Emulator! \nSupported are: \n\nGnome-terminal, Konsole, XFCE4-terminal, LXTerminal, Terminator, Sakura, Yakuake, urxterm, Eterm, xterm and aterm")
  ENDIF 
END

PUBLIC FUNCTION Event_Msg(Msg AS String)
  PRINT "[EVENT] " & Msg
END


PUBLIC FUNCTION Debug_Msg(Msg AS String)
  PRINT "[DEBUG] " & Msg
END