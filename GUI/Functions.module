' Gambas module file

PUBLIC WorkDir AS String = Functions.Get_Str("/opt/Customizer/settings.conf", "WORK_DIR=", "/home") 
PUBLIC ATitle AS String = Functions.Get_Str("/opt/Customizer/settings.conf", "APPEND_TITLE=", "1")

PUBLIC FUNCTION Get_Str(SrchFile AS String, SrchStr AS String, Def AS String) AS Variant
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer

  content = File.Load(SrchFile)
  content_array = Split(File.Load(SrchFile), "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN 
      sLine = Replace$(sLine, SrchStr, "")
      BREAK 
    ENDIF 
    counter += 1
  NEXT 
  
  IF counter = content_array.Count THEN 
    Message.Warning("Get_Str() unable to find:\n\nString: " & SrchStr & "\n In: " & SrchFile & "\n\nAppedning: " & SrchStr & Quote(Def) & "\nTo: " & SrchFile)
    File.Save(SrchFile, content & "\n" & SrchStr & Quote(Def))
    RETURN UnQuote(Def)
  ELSE 
    RETURN UnQuote(sLine)
  ENDIF 
END

PUBLIC FUNCTION Replace_Str(SrchFile AS String, SrchStr AS String, RpcStr AS String)
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer
  
  content = File.Load(SrchFile)
  content_array = Split(File.Load(SrchFile), "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN 
      File.Save(SrchFile, Replace$(content, sLine, SrchStr & Quote(RpcStr)))
      BREAK 
    ENDIF 
    counter += 1
  NEXT 
  
  IF counter = content_array.Count THEN 
    Message.Warning("Replace_Str() unable to find:\n\nString: " & SrchStr & "\n In: " & SrchFile & "\n\nAppedning: " & SrchStr & Quote(RpcStr) & "\nTo: " & SrchFile)
    File.Save(SrchFile, content & "\n" & SrchStr & Quote(RpcStr))
  ENDIF 
END


PUBLIC FUNCTION Replace_Str_AsIs(SrchFile AS String, SrchStr AS String, RpcStr AS String)
  DIM content_array AS String[]
  DIM sLine, content AS String
  DIM counter AS Integer
  
  content = File.Load(SrchFile)
  content_array = Split(File.Load(SrchFile), "\n")
  
  counter = 0
  FOR EACH sLine IN content_array
    IF sLine LIKE SrchStr & "*" THEN 
      File.Save(SrchFile, Replace$(content, sLine, SrchStr & RpcStr))
      BREAK 
    ENDIF 
    counter += 1
  NEXT 
  
  IF counter = content_array.Count THEN 
    Message.Warning("Replace_Str() unable to find:\n\nString: " & SrchStr & "\n In: " & SrchFile & "\n\nAppedning: " & SrchStr & RpcStr & "\nTo: " & SrchFile)
    File.Save(SrchFile, content & "\n" & SrchStr & RpcStr)
  ENDIF 
END



PUBLIC FUNCTION Edit_File(EditFile AS String)
  DIM Editor AS String

  Editor = Functions.Get_Str("/opt/Customizer/settings.conf", "EDITOR=", "nano")

  IF NOT Exist("/usr/bin/" & Editor) THEN 
    Message.Warning("Change the prefered text-editor, " & Editor & " can not be used")
  ELSE 
    IF Editor = "nano" OR Editor = "pico" OR Editor = "vi" OR Editor = "vim" THEN 
      IF ATitle = 1 THEN 
        EXEC ["x-terminal-emulator", "--title=Editing " & WorkDir & EditFile, "-e", Editor, WorkDir & EditFile] WAIT
      ELSE 
        EXEC ["x-terminal-emulator", "-e", Editor, WorkDir & EditFile] WAIT
      ENDIF 
    ELSE 
      EXEC [Editor, WorkDir & EditFile]
    ENDIF 
  ENDIF 
  
  CATCH 
    Message.Error("Unable to edit\n\nFile: " & EditFile & "\nWith text-editor: " & Editor)
END

PUBLIC FUNCTION Browse_Dir(BrsDir AS String)
  IF NOT Exist(WorkDir & BrsDir) THEN 
    Message.Error("The directory doesn't exists")
  ELSE IF Exist("/usr/bin/nautilus") THEN 
    EXEC ["/usr/bin/nautilus", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/dolphin") THEN 
    EXEC ["/usr/bin/dolphin", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/pcmanfm") THEN 
    EXEC ["/usr/bin/pcmanfm", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/xfe") THEN 
    EXEC ["/usr/bin/xfe", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/worker") THEN 
    EXEC ["/usr/bin/worker", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/gentoo") THEN 
    EXEC ["/usr/bin/gentoo", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/thunar") THEN 
    EXEC ["/usr/bin/thunar", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/filerunner") THEN 
    EXEC ["/usr/bin/filerunner", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/krusader") THEN 
    EXEC ["/usr/bin/krusader", WorkDir & BrsDir]
  ELSE IF Exist("/usr/bin/rox-filer") THEN 
    EXEC ["/usr/bin/rox-filer", WorkDir & BrsDir]
  ELSE 
    Message.Warning("No supported File-Manager was detected! \nSupported File-Managers are: \n\n<b>Nautilus (Gnome) \nDolphin (KDE) \n PCManFM (LXDE) \nThunar (XFCE4) \nXFE \nWorker \nGentoo \nFileRunner \nKrusader \nROX-Filer</b> \n\n Next time you try to browse folders \nmake sure you've installed one of these.")
  ENDIF
  
END

PUBLIC FUNCTION Enable_Stuff()
  FMain.Create_Snapshot.Enabled = TRUE
  FMain.Edit_Sources.Enabled = TRUE
  FMain.Install_DEB.Enabled = TRUE
  FMain.Terminal.Enabled = TRUE
  FMain.Build_ISO.Enabled = TRUE
  FMain.Clean.Enabled = TRUE
  FMain.Extras_Menu.Enabled = TRUE
  FMain.Directories.Enabled = TRUE
  FMain.Files.Enabled = TRUE
  FMain.Archive.Enabled = TRUE
  FMain.DistName.Enabled = TRUE
  FMain.HostName.Enabled = TRUE
  FMain.LiveCD_User.Enabled = TRUE
  FMain.Version.Enabled = TRUE
  FMain.ReleaseNotesURL.Enabled = TRUE
  
  'Check for installed Desktop env. or Window Manager
  Check.X_session()
  Check.Pkg_Manager()
END

PUBLIC FUNCTION Disable_Stuff()
  FMain.Create_Snapshot.Enabled = FALSE
  FMain.Edit_Sources.Enabled = FALSE
  FMain.Install_DEB.Enabled = FALSE
  FMain.Archive.Enabled = FALSE
  FMain.Terminal.Enabled = FALSE
  FMain.Build_ISO.Enabled = FALSE
  FMain.Clean.Enabled = FALSE
  FMain.Extras_Menu.Enabled = FALSE
  FMain.Directories.Enabled = FALSE
  FMain.Files.Enabled = FALSE
  FMain.Desktop.Enabled = FALSE
  FMain.DistName.Enabled = FALSE
  FMain.HostName.Enabled = FALSE
  FMain.LiveCD_User.Enabled = FALSE
  FMain.Version.Enabled = FALSE
  FMain.ReleaseNotesURL.Enabled = FALSE
END
