' Gambas module file

PUBLIC SUB Conf_File()
IF NOT Exist("/opt/Customizer/settings.conf") THEN 
    Message.Warning("Configuration file doesn't exists, creating one with the default values")
    File.Save("/opt/Customizer/settings.conf", "# Main settings\nWORK_DIR=\"/home\"\nMOUNT_DIR=\"/media/ISO\"\n\n# Preferences\nAPPEND_TITLE=1\nMESSAGES_COLORS=1\nFORCE_CHROOT=0\nAPT_HELPER=1\nEDITOR=nano\nRESOLUTION=800x600\nBOOT_FILES=0\nVRAM=256\nCOMPRESSION=bzip2\n\n# Saved variables\nISO=\"\"\nSNAPSHOT=\"\"\nDEB=\"\"\nHOOK=\"\"\nPIC=\"\"")
    
    CATCH 
      Message.Error("Unable to create configuration file, check your permissions")
  ENDIF 
END


PUBLIC SUB X_session()
  DIM Xsessions AS Variant
  DIM WorkDir AS String
  SHELL "grep WORK_DIR= /opt/Customizer/settings.conf | sed 's/WORK_DIR=//;s/\"//g'" TO WorkDir
  
  Xsessions = "0"
  TRY Xsessions = Dir(WorkDir & "/FileSystem/usr/share/xsessions").Count

  IF Val(Xsessions) >= 1 THEN
    FMain.Desktop.Enabled = TRUE
  ELSE 
    FMain.Desktop.Enabled = FALSE
  ENDIF 
END

PUBLIC SUB Pkg_Manager()
  DIM pkgms AS NEW Collection
  DIM WorkDir, tmpStr, pkgm AS String
  
  tmpStr = "WORK_DIR="
  WorkDir = Functions.Get_Conf(tmpStr)
  pkgms["first"] = "synaptic"
  pkgms["second"] = "aptitude"
  
  FOR EACH pkgm IN pkgms
    IF Exist(WorkDir & "/FileSystem/usr/bin/" & pkgm) OR IF Exist(WorkDir & "/FileSystem/usr/sbin/" & pkgm) THEN
      FMain.Archive.Enabled = TRUE
      BREAK 
    ELSE 
      FMain.Archive.Enabled = FALSE
    ENDIF 
  NEXT 
END

PUBLIC SUB ISO()
  DIM WorkDir, Dist, Arch, Rel, tmpStr, tmpFile AS String
  
  tmpStr = "WORK_DIR="
  WorkDir = Functions.Get_Conf(tmpStr)
  
  tmpFile = WorkDir & "/FileSystem/etc/lsb-release"
  tmpStr = "DISTRIB_ID="
  Dist = Functions.Get_Str(tmpFile, tmpStr)
  tmpStr = "DISTRIB_RELEASE="
  Rel = Functions.Get_Str(tmpFile, tmpStr)
  SHELL "chroot '" & WorkDir & "/FileSystem' dpkg --print-architecture" TO Arch
  
  IF Exist(WorkDir & "/" & Dist & "-" & Trim(Arch) & "-" & Rel & ".iso") THEN
    FMain.QEMU.Enabled = TRUE
  ENDIF 
END

PUBLIC SUB Existence()
  DIM RNURL, WorkDir, tmpStr, tmpFile AS String
  
  tmpStr = "WORK_DIR="
  WorkDir = Functions.Get_Conf(tmpStr)
  
  IF Exist(WorkDir & "/FileSystem") AND Exist(WorkDir & "/ISO") THEN 
    IF NOT Exist(WorkDir & "/FileSystem/root") OR NOT Exist(WorkDir & "/FileSystem/etc") THEN 
      Message.Error("Some important folder are missing which mait be result\nof unsuccessful cleaning or deleted by accident, clean and start\nall over again or import your latest snapshot (if you had created one).")
      FMain.Clean.Enabled = TRUE
    ELSE 
      IF NOT Exist(WorkDir & "/FileSystem/etc/casper.conf") OR NOT Exist(WorkDir & "/FileSystem/etc/lsb-release") THEN 
        Message.Error(WorkDir & "/FileSystem/etc/casper.conf or " & WorkDir & "/FileSystem/etc/lsb-release\nare deleted but are very essential for setting up some configuration.\nCreate them using a text editor or clean and start all over again!")
        Module.Disable_Stuff()
        FMain.Clean.Enabled = TRUE
      ELSE 
        'Enable some elements
        Module.Enable_Stuff()
      
        'Get some configuration to display it in the text boxes
        tmpFile = WorkDir & "/FileSystem/etc/casper.conf"
        tmpStr = "HOST="
        FMain.HostName.Text = Functions.Get_Str(tmpFile, tmpStr)
        tmpStr = "USERNAME="
        FMain.LiveCD_User.Text = Functions.Get_Str(tmpFile, tmpStr)
        tmpFile = WorkDir & "/FileSystem/etc/lsb-release"
        tmpStr = "DISTRIB_RELEASE="
        FMain.Version.Text = Functions.Get_Str(tmpFile, tmpStr)
        tmpStr = "DISTRIB_ID="
        FMain.DistName.Text = Functions.Get_Str(tmpFile, tmpStr)
        
        'Set/Load the release notes URL
        FMain.ReleaseNotesURL.Text = "http://www.ubuntu.com/getubuntu/releasenotes"
        TRY FMain.ReleaseNotesURL.Text = File.Load(WorkDir & "/ISO/.disk/release_notes_url")
        
        'Check if previously builded ISO image exists
        Check.ISO
        
        'Check if DEs/WM is installed
        Check.X_session()
        
        'Check if package manager is installed installed
        Check.Pkg_Manager()
      ENDIF 
    ENDIF
  ENDIF 
END
